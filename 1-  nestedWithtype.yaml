ForAll(
    Filter(
        Split(terraformFile, "variable"),
        Len(Trim(ThisRecord.Value)) > 0, // Exclude empty blocks
        !StartsWith(Value, "#") // Exclude comments
    ),
    With(
        {
            // Step 1: Extract Variable Name
            variableName: Text(
                Mid(
                    ThisRecord.Value,
                    Find("""", ThisRecord.Value) + 1,
                    Find("""", Mid(ThisRecord.Value, Find("""", ThisRecord.Value) + 1)) - 1
                )
            ),

            // Step 2: Extract the Type Row
            variableType: Text(
                Last(
                    Split(
                        LookUp(
                            Split(ThisRecord.Value, Char(10)) As type,
                            StartsWith(Trim(type.Value), "type =")
                        ).Value, 
                        "="
                    )
                ).Value
            ),

            // Step 3: Extract the Variable Content (Raw Content)
            variableContent: Trim(
                Substitute(
                    Substitute(
                        Trim(
                            Concat(
                                Filter(
                                    Split(ThisRecord.Value, Char(10)),
                                    !("#" in Value) // Exclude comments
                                ) As Row, 
                                Row.Value,
                                "," & Char(10)
                            )
                        ), 
                        "=", ":"
                    ), 
                    Char(10) & ",", ""
                )
            ),

            // Step 4: Extract Default Value
            defaultValue: If(
                Find("default =", ThisRecord.Value) > 0,
                Text(
                    Mid(
                        First(
                            Filter(
                                Split(ThisRecord.Value, Char(10)),
                                StartsWith(Trim(ThisRecord.Value), "default =")
                            )
                        ).Value,
                        Find("=", First(Filter(Split(ThisRecord.Value, Char(10)), StartsWith(Trim(ThisRecord.Value), "default ="))).Value) + 1,
                        Len(ThisRecord.Value)
                    )
                ),
                Blank()
            ),

            // Step 5: Extract Validation Block
            validationBlock: If(
                Find("validation {", ThisRecord.Value) > 0,
                Text(
                    Mid(
                        ThisRecord.Value,
                        Find("validation {", ThisRecord.Value),
                        Find("}", ThisRecord.Value, Find("validation {", ThisRecord.Value)) - Find("validation {", ThisRecord.Value) + 1
                    )
                ),
                Blank()
            ),

            // Step 6: Handle Nested Objects and Map(Object) Parsing
            nestedContent: ForAll(
                Filter(
                    Split(Substitute(variableContent, Char(10), ""), "},"), // Split content by delimiters
                    "object(" in Value || "map(" in Value // Identify rows with nested structures
                ) As Objects,
                With(
                    {
                        // Step 6.1: Clean the Nested Structure
                        cleanedContent: Trim(
                            Substitute(
                                Substitute(
                                    Objects.Value,
                                    "object({",
                                    ""
                                ),
                                "map(object({",
                                ""
                            )
                        ),

                        // Step 6.2: Remove Trailing "})"
                        finalContent: If(
                            Right(cleanedContent, 2) = "})",
                            Left(cleanedContent, Len(cleanedContent) - 2), // Remove "})"
                            cleanedContent
                        )
                    },
                    // Step 6.3: Parse Key-Value Pairs from the Cleaned Content
                    ForAll(
                        Split(finalContent, ","), // Split by commas to get key-value pairs
                        With(
                            {
                                keyValuePair: Split(ThisRecord.Value, ":"), // Split each row into key and value
                                rawValue: Last(keyValuePair).Value, // Extract raw value for further parsing

                                // Step 6.4: Extract Type Information
                                fieldType: If(
                                    StartsWith(Trim(rawValue), "optional("),
                                    Mid(
                                        rawValue,
                                        Find("(", rawValue) + 1,
                                        Find(",", rawValue) - Find("(", rawValue) - 1
                                    ), // Extract type within optional()
                                    If(
                                        StartsWith(Trim(rawValue), "list("),
                                        "list",
                                        If(
                                            StartsWith(Trim(rawValue), "map("),
                                            "map",
                                            If(
                                                StartsWith(Trim(rawValue), "object("),
                                                "object",
                                                "string" // Default fallback type
                                            )
                                        )
                                    )
                                )
                            },
                            {
                                key: First(keyValuePair).Value, // Extract the key
                                value: rawValue, // Extract the value
                                type: fieldType // Extracted field type
                            }
                        )
                    )
                )
            )
        },
        {
            // Final Output for Each Variable
            variableName: variableName,
            variableType: variableType,
            defaultValue: defaultValue,
            validationBlock: validationBlock,
            variableContent: Substitute(
                Substitute(
                    Substitute(variableContent, """" & variableName & """", variableName & ":"), 
                    "{,", "{"
                ), 
                ", }", "}"
            ),
            nestedContent: nestedContent
        }
    )
)
