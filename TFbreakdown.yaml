With(
    {
        // Step 1: Split Terraform file into variable blocks
        variableBlocks: Filter(
            Split(terraformFile, "variable"),
            Len(Trim(ThisRecord.Value)) > 0 // Exclude empty blocks
        )
    },
    ForAll(
        variableBlocks,
        With(
            {
                // Step 2: Extract Variable Name
                variableName: Text(
                    Mid(ThisRecord.Value, 
                        Find("""", ThisRecord.Value) + 1,
                        Find("""", Mid(ThisRecord.Value, Find("""", ThisRecord.Value) + 1)) - 1
                    )
                ),
                
                // Step 3: Extract Type
                typeRow: First(Filter(Split(ThisRecord.Value, Char(10)), StartsWith(Trim(ThisRecord.Value), "type ="))).Value,
                variableType: Text(
                    Mid(typeRow, Find("=", typeRow) + 1, Len(typeRow))
                ),
                
                // Step 4: Extract Default Value (if present)
                defaultRow: If(
                    Find("default =", ThisRecord.Value) > 0,
                    First(Filter(Split(ThisRecord.Value, Char(10)), StartsWith(Trim(ThisRecord.Value), "default ="))).Value,
                    ""
                ),
                defaultValue: If(
                    !IsBlank(defaultRow),
                    Mid(defaultRow, Find("=", defaultRow) + 1, Len(defaultRow)),
                    Blank()
                ),
                
                // Step 5: Extract Validation Condition and Error Message
                validationBlock: If(
                    Find("validation {", ThisRecord.Value) > 0,
                    Mid(
                        ThisRecord.Value,
                        Find("validation {", ThisRecord.Value),
                        Find("}", ThisRecord.Value, Find("validation {", ThisRecord.Value)) - Find("validation {", ThisRecord.Value) + 1
                    ),
                    ""
                ),
                validationCondition: If(
                    !IsBlank(validationBlock),
                    Mid(
                        validationBlock,
                        Find("condition = ", validationBlock) + 11,
                        Find(Char(10), validationBlock, Find("condition = ", validationBlock)) - (Find("condition = ", validationBlock) + 11)
                    ),
                    Blank()
                ),
                validationError: If(
                    !IsBlank(validationBlock),
                    Mid(
                        validationBlock,
                        Find("error_message = ", validationBlock) + 15,
                        Find(Char(10), validationBlock, Find("error_message = ", validationBlock)) - (Find("error_message = ", validationBlock) + 15)
                    ),
                    Blank()
                ),
                
                // Step 6: Parse Nested Types (map, object, list)
                parsedType: If(
                    StartsWith(Trim(variableType), "map("),
                    "{ ""type"": ""map"", ""content"": """ & Mid(variableType, 5, Len(variableType) - 5) & """ }",
                    If(
                        StartsWith(Trim(variableType), "object("),
                        "{ ""type"": ""object"", ""content"": """ & Mid(variableType, 8, Len(variableType) - 8) & """ }",
                        If(
                            StartsWith(Trim(variableType), "list("),
                            "{ ""type"": ""list"", ""content"": """ & Mid(variableType, 6, Len(variableType) - 6) & """ }",
                            variableType
                        )
                    )
                )
            },
            // Step 7: Construct JSON for Each Variable
            {
                "VariableName": variableName,
                "Type": parsedType,
                "DefaultValue": defaultValue,
                "Validation": {
                    "Condition": validationCondition,
                    "ErrorMessage": validationError
                }
            }
        )
    )
)
