With(
    {
        // Step 1: Split Terraform file into variable blocks
        variableBlocks: Filter(
            Split(terraformFile, "variable"),
            Len(Trim(ThisRecord.Value)) > 0 // Exclude empty blocks
        )
    },
    ForAll(
        variableBlocks,
        With(
            {
                // Extract Variable Name
                variableName: Text(
                    Mid(
                        ThisRecord.Value,
                        Find("""", ThisRecord.Value) + 1,
                        Find("""", Mid(ThisRecord.Value, Find("""", ThisRecord.Value) + 1)) - 1
                    )
                )
            },
            With(
                {
                    // Extract the type row
                    typeRow: Text(
                        First(
                            Filter(
                                Split(ThisRecord.Value, Char(10)),
                                StartsWith(Trim(ThisRecord.Value), "type =")
                            )
                        ).Value
                    )
                },
                With(
                    {
                        // Extract Type
                        variableType: Text(
                            Mid(
                                typeRow,
                                Find("=", typeRow) + 1,
                                Len(typeRow) - Find("=", typeRow)
                            )
                        )
                    },
                    With(
                        {
                            // Extract Default Value
                            defaultValue: If(
                                Find("default =", ThisRecord.Value) > 0,
                                Text(
                                    Mid(
                                        First(
                                            Filter(
                                                Split(ThisRecord.Value, Char(10)),
                                                StartsWith(Trim(ThisRecord.Value), "default =")
                                            )
                                        ).Value,
                                        Find("=", First(Filter(Split(ThisRecord.Value, Char(10)), StartsWith(Trim(ThisRecord.Value), "default ="))).Value) + 1,
                                        Len(ThisRecord.Value)
                                    )
                                ),
                                Blank()
                            )
                        },
                        With(
                            {
                                // Extract Validation Block
                                validationBlock: If(
                                    Find("validation {", ThisRecord.Value) > 0,
                                    Text(
                                        Mid(
                                            ThisRecord.Value,
                                            Find("validation {", ThisRecord.Value),
                                            Find("}", ThisRecord.Value, Find("validation {", ThisRecord.Value)) - Find("validation {", ThisRecord.Value) + 1
                                        )
                                    ),
                                    Blank()
                                )
                            },
                            With(
                                {
                                    // Parse Condition and Error Message from Validation Block
                                    validationCondition: If(
                                        !IsBlank(validationBlock),
                                        Text(
                                            Mid(
                                                validationBlock,
                                                Find("condition = ", validationBlock) + 11,
                                                Find(Char(10), validationBlock, Find("condition = ", validationBlock)) - (Find("condition = ", validationBlock) + 11)
                                            )
                                        ),
                                        Blank()
                                    ),
                                    validationError: If(
                                        !IsBlank(validationBlock),
                                        Text(
                                            Mid(
                                                validationBlock,
                                                Find("error_message = ", validationBlock) + 15,
                                                Find(Char(10), validationBlock, Find("error_message = ", validationBlock)) - (Find("error_message = ", validationBlock) + 15)
                                            )
                                        ),
                                        Blank()
                                    )
                                },
                                With(
                                    {
                                        // Parse Nested Types (map, object, list)
                                        parsedType: If(
                                            StartsWith(Trim(variableType), "map("),
                                            "{ ""type"": ""map"", ""content"": """ & Mid(variableType, 5, Len(variableType) - 5) & """ }",
                                            If(
                                                StartsWith(Trim(variableType), "object("),
                                                "{ ""type"": ""object"", ""content"": """ & Mid(variableType, 8, Len(variableType) - 8) & """ }",
                                                If(
                                                    StartsWith(Trim(variableType), "list("),
                                                    "{ ""type"": ""list"", ""content"": """ & Mid(variableType, 6, Len(variableType) - 6) & """ }",
                                                    variableType
                                                )
                                            )
                                        )
                                    },
                                    // Construct Final JSON Object for Each Variable
                                    {
                                        "VariableName": variableName,
                                        "Type": parsedType,
                                        "DefaultValue": defaultValue,
                                        "Validation": {
                                            "Condition": validationCondition,
                                            "ErrorMessage": validationError
                                        }
                                    }
                                )
                            )
                        )
                    )
                )
            )
        )
    )
)
